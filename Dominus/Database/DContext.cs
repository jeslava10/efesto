using Dominus.Entities;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using MySql.Data.MySqlClient;
using Npgsql;
using Oracle.ManagedDataAccess.Client;

namespace Dominus.Database
{
    public class DContext : DbContext
    {

        public DbSet<CommonAudit> CommonAudit { get; set; }

        public DbSet<CommonLanguage> CommonLanguage { get; set; }

        public DbSet<CommonLanguageResource> CommonLanguageResource { get; set; }

        protected DataBaseSetting setting;

        public DataBaseSetting Setting
        {
            get { return setting; }
        }

        public DContext(DataBaseSetting setting)
        {
            this.setting = setting;
        }

        public override int SaveChanges()
        {
            OnBeforeSaveChanges();
            var result = base.SaveChanges();
            return result;
        }

        private void OnBeforeSaveChanges()
        {

            PropertyValues oldDbValues = null;
            ChangeTracker.DetectChanges();
            var auditEntries = new List<AuditEntry>();
            foreach (var entry in ChangeTracker.Entries())
            {
                if (entry.Entity is CommonAudit || entry.State == EntityState.Detached || entry.State == EntityState.Unchanged)
                    continue;
                if (entry.State == EntityState.Modified)
                    oldDbValues = entry.GetDatabaseValues();
                var auditEntry = new AuditEntry(entry);
                //auditEntry.Action = entry.State.ToString();
                auditEntry.TableName = entry.Metadata.GetTableName();
                auditEntry.TransactionDate = DateTime.Now;
                auditEntry.CreationDate = DateTime.Now;
                auditEntry.LastUpdate = DateTime.Now;
                auditEntry.CreatedBy = "admin";
                auditEntry.UpdatedBy = "admin";

                auditEntries.Add(auditEntry);

                foreach (var property in entry.Properties)
                {

                    if (property.IsTemporary)
                    {
                        // value will be generated by the database, get the value after saving
                        auditEntry.TemporaryProperties.Add(property);
                        continue;
                    }

                    string propertyName = property.Metadata.Name;

                    if (propertyName == "UpdatedBy")
                    {
                        auditEntry.CreatedBy = property.CurrentValue.ToString();
                        auditEntry.UpdatedBy = property.CurrentValue.ToString();
                    }

                    if (property.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[propertyName] = property.CurrentValue;
                        continue;
                    }

                    switch (entry.State)
                    {
                        case EntityState.Added:
                            auditEntry.Action = Enum.GetName(typeof(EntityState), EntityState.Added);
                            auditEntry.NewValues[propertyName] = property.CurrentValue;
                            break;

                        case EntityState.Deleted:
                            auditEntry.Action = Enum.GetName(typeof(EntityState), EntityState.Deleted);
                            auditEntry.OldValues[propertyName] = property.OriginalValue;
                            break;

                        case EntityState.Modified:
                            if (property.IsModified && (property.CurrentValue == null ? "" : property.CurrentValue.ToString()) != (oldDbValues.GetValue<object>(property.Metadata.Name) == null ? "" : oldDbValues.GetValue<object>(property.Metadata.Name).ToString()))
                            {
                                auditEntry.Action = Enum.GetName(typeof(EntityState), EntityState.Modified);
                                auditEntry.OldValues[propertyName] = oldDbValues.GetValue<object>(property.Metadata.Name);
                                auditEntry.NewValues[propertyName] = property.CurrentValue;
                            }
                            break;
                    }
                }


            }
            auditEntries = auditEntries.Where(x=>x.Action!=null).ToList();

            if (auditEntries != null && auditEntries.Count > 0)
            {
                // Save audit entities that have all the modifications
                foreach (var auditEntry in auditEntries)
                {
                    CommonAudit.Add(auditEntry.ToAudit());
                }
            }


        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            base.OnConfiguring(optionsBuilder);
            if (setting.DataBaseType == DataBaseType.SQLServer)
            {
                optionsBuilder.UseSqlServer(GetConnectionString(setting))
                    //optionsBuilder.UseSqlServer(GetConnectionString(setting), sqlServerOptionsAction: sqlOptions =>
                    //{
                    //    sqlOptions.EnableRetryOnFailure(
                    //    maxRetryCount: 10,
                    //    maxRetryDelay: TimeSpan.FromSeconds(1),
                    //    errorNumbersToAdd: null);
                    //})
                    //optionsBuilder.UseSqlServer(GetConnectionString(setting), options => options.EnableRetryOnFailure())
                    //.ConfigureWarnings(warnings => warnings.Ignore(CoreEventId.IncludeIgnoredWarning))
                    //.ConfigureWarnings(warnings => warnings.Ignore(CoreEventId.NavigationIncluded))
                    //.ConfigureWarnings(x => x.Throw(RelationalEventId.QueryClientEvaluationWarning))
                    //.EnableSensitiveDataLogging(DApp.IsHostDevelopment)
                    .UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);
            }
            else if (setting.DataBaseType == DataBaseType.Oracle)
            {

            }
            else if (setting.DataBaseType == DataBaseType.MySql)
                optionsBuilder.UseMySQL(GetConnectionString(setting));
            else if (setting.DataBaseType == DataBaseType.PostgreSQL)
                optionsBuilder.UseNpgsql(GetConnectionString(setting));
        }

        protected override void OnModelCreating(ModelBuilder builder)
        {
            SetRelationShips(builder);
            SetBaseIndex(builder);
            if (LoadEntity.Assemblies != null && LoadEntity.Assemblies.Count > 0)
            {
                foreach (var item in LoadEntity.Assemblies)
                {
                    builder.ApplyConfigurationsFromAssembly(item);
                }
            }

        }

        protected void SetRelationShips(ModelBuilder builder)
        {
        }

        protected void SetBaseIndex(ModelBuilder builder)
        {
        }

        private string GetConnectionString(DataBaseSetting settings)
        {
            string connectionString = "";

            if (settings.DataBaseType == DataBaseType.SQLServer)
            {
                SqlConnectionStringBuilder builder = new SqlConnectionStringBuilder();
                builder.DataSource = settings.DataSource;
                builder.InitialCatalog = settings.InitialCatalog;
                builder.IntegratedSecurity = false;
                builder.MultipleActiveResultSets = true;
                builder.UserID = settings.UserId;
                builder.Password = settings.Password;
                builder.UserInstance = false;
                builder.ConnectTimeout = 0;
                builder.Encrypt = false;
                connectionString = builder.ConnectionString;
            }
            if (settings.DataBaseType == DataBaseType.Oracle)
            {
                OracleConnectionStringBuilder builder = new OracleConnectionStringBuilder();
                builder.DataSource = settings.DataSource;
                //builder. = settings.InitialCatalog;
                //builder.IntegratedSecurity = false;
                //builder.MultipleActiveResultSets = true;
                builder.UserID = settings.UserId;
                builder.Password = settings.Password;
                //builder.UserInstance = false;
                builder.ConnectionTimeout = 25;
                connectionString = builder.ConnectionString;
            }
            else if (settings.DataBaseType == DataBaseType.MySql)
            {
                MySqlConnectionStringBuilder builder = new MySqlConnectionStringBuilder();
                builder.Server = settings.DataSource;
                builder.Database = settings.InitialCatalog;
                builder.UserID = settings.UserId;
                builder.Password = settings.Password;
                builder.ConnectionTimeout = 25;
                builder.ConvertZeroDateTime = true;
                connectionString = builder.ConnectionString;
            }
            else if (settings.DataBaseType == DataBaseType.PostgreSQL)
            {
                NpgsqlConnectionStringBuilder builder = new NpgsqlConnectionStringBuilder();
                builder.Host = settings.DataSource;
                builder.Database = settings.InitialCatalog;
                builder.Username = settings.UserId;
                builder.Password = settings.Password;
                builder.Timeout = 0;
                connectionString = builder.ConnectionString;
            }
            return connectionString;
        }


    }

    public static class LoadEntity
    {
        public static bool EnsureCreated { get; set; }

        public static List<System.Reflection.Assembly> Assemblies { get; set; }

        static LoadEntity()
        {
            Assemblies = new List<System.Reflection.Assembly>();
        }

        public static void AddEntities(System.Reflection.Assembly configuration)
        {
            Assemblies.Add(configuration);
        }

    }
}

